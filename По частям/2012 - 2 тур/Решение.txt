
//
// Модуль объекта
//

// функция получения остатков товаров, учитывая/не учитывая разрез складов и товаров
Функция ОстаткиТоваров(Дата, Склад = Неопределено, СО = Неопределено, ЗнакСравненияСклада = "=") Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЖурналПроводокОстатки.Субконто1 КАК СО,
	               |	ЖурналПроводокОстатки.Субконто2 КАК Склад,
	               |	ЖурналПроводокОстатки.СуммаОстаток КАК Сумма,
	               |	ЖурналПроводокОстатки.КоличествоОстаток КАК Количество
	               |ИЗ
	               |	РегистрБухгалтерии.ЖурналПроводок.Остатки(&Дата, Счет = &Счет, , " +
				   	?(СО <> Неопределено, "Субконто1 = &СО", "") +
					?(Склад <> Неопределено и СО <> Неопределено, " И ", "") + 
					?(Склад <> Неопределено, "Субконто2 " + ЗнакСравненияСклада + " &Склад", "") + ") КАК ЖурналПроводокОстатки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЖурналПроводокОстатки.Субконто1.Наименование,
	               |	ЖурналПроводокОстатки.Субконто2.Наименование";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СО", СО);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Счет", ПланыСчетов.ПланСчетов.Материалы);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// функция посчета средневзвешанной цены исходя из остатков на указанную дату
Функция СредневзвешаннаяЦена(Дата, СО) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ЖурналПроводокОстатки.СуммаОстаток) КАК Сумма,
	               |	СУММА(ЖурналПроводокОстатки.КоличествоОстаток) КАК Количество
	               |ИЗ
	               |	РегистрБухгалтерии.ЖурналПроводок.Остатки(&Дата, Счет = &Счет, , Субконто1 = &СО) КАК ЖурналПроводокОстатки";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СО", СО);
	Запрос.УстановитьПараметр("Счет", ПланыСчетов.ПланСчетов.Материалы);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат 0;
	ИначеЕсли Результат[0].Сумма = 0 или Результат[0].Количество = 0 Тогда
		Возврат 0;
	Иначе
		Возврат Результат[0].Сумма / Результат[0].Количество;
	КонецЕсли;
КонецФункции

// функция возвращает остатки по складам, с разрезом по количеству и сумме (по складам)
Функция ОстаткиНаСкладах(Дата, УказыватьСО = Ложь, ВычислятьСумму = Истина, ВычислятьКоличество = Ложь, ВычислятьИтого = Истина) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	" + ?(УказыватьСО, "ЖурналПроводокОстатки.Субконто1 КАК СО,", "") + "
	               |	ЖурналПроводокОстатки.Субконто2 КАК Склад,
	               |	" + ?(ВычислятьСумму, "СУММА(ЖурналПроводокОстатки.СуммаОстаток) КАК Сумма"
				   		+ ?(ВычислятьКоличество,",",""), "") + "
	               |	" + ?(ВычислятьКоличество, "ЖурналПроводокОстатки.КоличествоОстаток КАК Количество", "") + "
	               |ИЗ
	               |	РегистрБухгалтерии.ЖурналПроводок.Остатки(&Дата, Счет = &Счет, , ) КАК ЖурналПроводокОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
				   |	" + ?(УказыватьСО, "ЖурналПроводокОстатки.Субконто1,", "") + "
	               |	ЖурналПроводокОстатки.Субконто2,
	               |	ЖурналПроводокОстатки.КоличествоОстаток" + 
				   ?(ВычислятьИтого и (ВычислятьКоличество или ВычислятьСумму), "
				   |ИТОГИ " +
				   ?(ВычислятьСумму, "
	               |	СУММА(Сумма)", "") + 
				   ?(ВычислятьКоличество, "
				   |	СУММА(Количество)", "") + " 
	               |ПО
	               |	ОБЩИЕ", "");
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Счет", ПланыСчетов.ПланСчетов.Материалы);
	Возврат Запрос.Выполнить();
КонецФункции

// функция возвращает количественные остатки на дату в разрезе складов и товаров
Функция КоличествоНаСкладе(Дата, Склад, СО) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЖурналПроводокОстатки.КоличествоОстаток КАК Количество
	               |ИЗ
	               |	РегистрБухгалтерии.ЖурналПроводок.Остатки(
	               |			&Дата,
	               |			Счет = &Счет,
	               |			,
	               |			Субконто1 = &СО
	               |				И Субконто2 = &Склад) КАК ЖурналПроводокОстатки";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Счет", ПланыСчетов.ПланСчетов.Материалы);
	Запрос.УстановитьПараметр("СО", СО);
	Запрос.УстановитьПараметр("Склад", Склад);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат 0;
	Иначе
		Возврат Результат[0].Количество;
	КонецЕсли;
КонецФункции

//
// Модуль формы
//

Процедура КнопкаСформироватьНажатие(Кнопка)
	
	// таблица средневзвешанных цен
	СрЦ = Новый ТаблицаЗначений;
	СрЦ.Колонки.Добавить("СО");
	СрЦ.Колонки.Добавить("Цена");
	СрЦ.Колонки.Добавить("Количество");
	
	ТабДок = ЭлементыФормы.ПолеВывода;
	ТабДок.Очистить();
	
	// получение областей макета
	Макет = ПолучитьМакет("ТекущиеОстатки");
	ОбластьЗаголовка = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаОбщая = Макет.ПолучитьОбласть("Шапка|Общее");
	ОбластьШапкаСклад = Макет.ПолучитьОбласть("Шапка|Склад");
	ОбластьСтрокаОбщая = Макет.ПолучитьОбласть("Строка|Общее");
	ОбластьСтрокаСклад = Макет.ПолучитьОбласть("Строка|Склад");
	ОбластьИтогоОбщая = Макет.ПолучитьОбласть("Итого|Общее");
	ОбластьИтогоСклад = Макет.ПолучитьОбласть("Итого|Склад");
	ОбластьОбщееИтого = Макет.ПолучитьОбласть("ИтогоОбщее");
	ОбластьРазрыв = Макет.ПолучитьОбласть("Разрыв");
	
	// вывод заголовка первой таблицы
	ОбластьЗаголовка.Параметры.Заголовок = "Запасы спецодежды на складах предприятия на " + Формат(Дата, "ДФ=dd.MM.yyyy");
	ТабДок.Вывести(ОбластьЗаголовка);
	
	// вывод всех складов
	ТабДок.Вывести(ОбластьШапкаОбщая);
	ВыборкаСкладов = Справочники.Склады.Выбрать();
	Пока ВыборкаСкладов.Следующий() Цикл
		ОбластьШапкаСклад.Параметры.Склад = ВыборкаСкладов.Наименование;
		ТабДок.Присоединить(ОбластьШапкаСклад);
	КонецЦикла;
		
	ВыборкаСО = Справочники.Материалы.Выбрать();
	Пока ВыборкаСО.Следующий() Цикл
		ОбластьСтрокаОбщая.Параметры.Спецодежда = ВыборкаСО.Ссылка;
		
		// заполнения таблицы средневзвешанных цен
		НовСтр = СрЦ.Добавить();
		НовСтр.СО = ВыборкаСО.Ссылка;
		НовСтр.Цена = СредневзвешаннаяЦена(Дата, ВыборкаСО.Ссылка);
		
		ОбластьСтрокаОбщая.Параметры.Цена = НовСтр.Цена;
		ТабДок.Вывести(ОбластьСтрокаОбщая);
		ВыборкаСкладов = Справочники.Склады.Выбрать();
		Пока ВыборкаСкладов.Следующий() Цикл
			
			// для каждой спецодежды каждого склада вычисляем остатки
			Остатки = ОстаткиТоваров(Дата, ВыборкаСкладов.Ссылка, ВыборкаСО.Ссылка);
			Если Остатки.Количество() = 0 Тогда
				ОбластьСтрокаСклад.Параметры.Количество = 0;
				ОбластьСтрокаСклад.Параметры.Стоимость = 0;
			Иначе
				ОбластьСтрокаСклад.Параметры.Количество = Остатки[0].Количество;
				ОбластьСтрокаСклад.Параметры.Стоимость = Остатки[0].Сумма;
			КонецЕсли;
			// и выводим их в отчет
			ТабДок.Присоединить(ОбластьСтрокаСклад);
		КонецЦикла;
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьИтогоОбщая);
	
	// общая стоимостная оценка спецодежды на складах
	СОСклада = Новый ТаблицаЗначений;
	СОСклада.Колонки.Добавить("Склад");
	СОСклада.Колонки.Добавить("Сумма");
	
	// получаем остатки, не учитывая разрез по материалам и складам
	ОстаткиСклады = ОстаткиНаСкладах(Дата).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОстаткиСклады.Следующий();
	
	// остатки по всем складам и всей СО (сумма остатков по всем складам)
	ВсегоНаПредприятии = ОстаткиСклады.Сумма;
	
	ОбластьОбщееИтого.Параметры.Стоимость = ОстаткиСклады.Сумма;
	ОстаткиСкладов = ОстаткиСклады.Выбрать();
	Пока ОстаткиСкладов.Следующий() Цикл
		// заполняем таблицу общей стоиомостной оценки складов
		НовСтр = СОСклада.Добавить();
		НовСтр.Склад = ОстаткиСкладов.Склад;
		НовСтр.Сумма = ОстаткиСкладов.Сумма;
		
		// выводим общую сумму в отчет
		ОбластьИтогоСклад.Параметры.Стоимость = ОстаткиСкладов.Сумма;
		ТабДок.Присоединить(ОбластьИтогоСклад);
	КонецЦикла;
	
	// вывод "итого по предприятию"
	ТабДок.Вывести(ОбластьОбщееИтого);
	
	// сортируем таблицу средневзвешанных цен по обыванию цен
	СрЦ.Сортировать("Цена Убыв");
	
	// получаем количество, которое необходимо распределить на оставшиеся склады
	Для Каждого Стр Из СрЦ Цикл
		Стр.Количество = КоличествоНаСкладе(Дата, ЛиквидируемыйСклад, Стр.СО);
	КонецЦикла;

	// остатки на складах по количеству, без учета ликвидированного склада
	ОстаткиСкл = ОстаткиТоваров(Дата, ЛиквидируемыйСклад, , "<>");
	
	// массив для хранения сумм спецодежды после переоценки
	МассивСО = Новый ТаблицаЗначений;
	МассивСО.Колонки.Добавить("Склад");
	МассивСО.Колонки.Добавить("Сумма");
	МассивСО.Колонки.Добавить("ДляРаспределения");
	
	// переоценка по средневзвешанной цене
	Для Каждого Стр Из ОстаткиСкл Цикл
		// добавление склада в массив, если его еще там нет
		Если МассивСО.Найти(Стр.Склад) = Неопределено Тогда
			НовСтрСкл = МассивСО.Добавить();
			НовСтрСкл.Склад = Стр.Склад;
			НовСтрСкл.Сумма = 0;
			НовСтрСкл.ДляРаспределения = 0;
		КонецЕсли;
		
		Для Каждого СтрСО Из СрЦ Цикл
			Если Стр.СО = СтрСО.СО Тогда
				Стр.Сумма = Стр.Количество * СтрСО.Цена;
				
				// получаем общую стоимостную оценку по складам после переоценки (с учетом средневзвешанных цен)
				МассивСО.Найти(Стр.Склад, "Склад").Сумма = МассивСО.Найти(Стр.Склад, "Склад").Сумма + Стр.Сумма;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// вычисляем сумму, которой не хватает до средней стоимостной оценки всех товаров на каждом складе после ликвидации
	Для Каждого Стр Из МассивСО Цикл
		Стр.ДляРаспределения = ВсегоНаПредприятии / МассивСО.Количество() - Стр.Сумма;
	КонецЦикла;
	
	МассивСО.Сортировать("ДляРаспределения Убыв");
	
	Распределение = Новый ТаблицаЗначений;
	Распределение.Колонки.Добавить("Склад");
	Распределение.Колонки.Добавить("СО");
	Распределение.Колонки.Добавить("Количество");
	Распределение.Колонки.Добавить("Сумма");
	
	//поиск оптимального перемещения товаров с ликвидируемого склада на оставшиеся два
	
	//////////////////////////////////////////////////////////////////////////////////
	//Для поиска оптимального варианта размещения спецодежды ликвидируемого склада и
	//оставшихся двух складов использую следующий алогритм: сначала сортируем склады
	//по убыванию по сумме, которой не хватает до средней стоимостной оценки (для этого
	//общую сумму по предприятию делим на два и вычитаем из нее стоимостную оценку после
	//переоценки находящуюся на каждом складе). Затем, чтобы отклонение от стоимостной
	//оценки, которую необходимо набрать было минимальным, начинаем перемещение с самых
	//дорогих (по переоценочным ценам) товарам, что дает возможность заполнить и маленькое
	//отклонение, перемещая товары от дорогих к дешевым. При этом заполняем таблицу
	//для посчета суммы и количества перемещенных товаров на каждый склад.
	/////////////////////////////////////////////////////////////////////////////////
	
	Для Каждого Стр Из МассивСО Цикл
		Для Каждого СтрСО Из СрЦ Цикл
			Пока СтрСО.Количество > 0 Цикл
				Если Стр.ДляРаспределения - СтрСО.Цена < 0 Тогда
					Прервать;
				КонецЕсли;
				СтрСО.Количество = СтрСО.Количество - 1;
				Стр.ДляРаспределения = Стр.ДляРаспределения - СтрСО.Цена;
				Стр.Сумма = Стр.Сумма + СтрСО.Цена;
				
				НовСтр = Распределение.Добавить();
				НовСтр.Склад = Стр.Склад;
				НовСтр.СО = СтрСО.СО;
				НовСтр.Количество = 1;
				НовСтр.Сумма = СтрСО.Цена;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// если не все до конца распределилось, то ищем куда лучше отнести последний товар, если он есть
	ОстатокРаспределения = МассивСО.Итог("ДляРаспределения");	
	СрЦ.Сортировать("Количество Убыв, Цена Убыв");
	
	МассивСО.Сортировать("Сумма Убыв");
	
	Для Каждого Стр Из СрЦ Цикл
		// выбираем товар, который остался (если остался)
		Если Стр.Количество > 0 Тогда
			Стр.Количество = Стр.Количество - 1;
			МассивСО[1].ДляРаспределения = МассивСО[1].ДляРаспределения - Стр.Цена;
			МассивСО[1].Сумма = МассивСО[1].Сумма + Стр.Цена;
			
			// и выбираем для перемещения тот склад, добавив в который отклонение будет минимальным
			НовСтр = Распределение.Добавить();
			НовСтр.Склад = МассивСО[1].Склад;
			НовСтр.СО = Стр.СО;
			НовСтр.Количество = 1;
			НовСтр.Сумма = Стр.Цена;
		КонецЕсли;
	КонецЦикла;
	
	// сворачиваем таблицу с распределенными товарами, для посчета суммы и количества
	Распределение.Свернуть("Склад, СО", "Количество, Сумма");
	Распределение.Сортировать("Склад Возр, СО Возр");
	
	// вывод разрыва между отчетами
	ТабДок.Вывести(ОбластьРазрыв);
	
	// вывод заголовка второй таблицы
	ОбластьЗаголовка.Параметры.Заголовок = "Предлагаемый вариант размещения спецодежды на двух складах";
	ТабДок.Вывести(ОбластьЗаголовка);
	
	// выводим шапку таблицы для каждого склада
	ТабДок.Вывести(ОбластьШапкаОбщая);
	ВыборкаСкладов = Справочники.Склады.Выбрать();
	Пока ВыборкаСкладов.Следующий() Цикл
		Если ВыборкаСкладов.Ссылка <> ЛиквидируемыйСклад Тогда
			ОбластьШапкаСклад.Параметры.Склад = ВыборкаСкладов.Наименование;
			ТабДок.Присоединить(ОбластьШапкаСклад);
		КонецЕсли;
	КонецЦикла;
	
	// массив общей стоимостной оценки по складам после ликвидации вабранного склада
	ОбщиеИтоговыеСуммы = Новый Массив;
	ОбщиеИтоговыеСуммы.Добавить(0);
	ОбщиеИтоговыеСуммы.Добавить(0);
	
	// вывод спецодежды по складам (по количеству и сумме)
	ВыборкаСО = Справочники.Материалы.Выбрать();
	Пока ВыборкаСО.Следующий() Цикл
		ОбластьСтрокаОбщая.Параметры.Спецодежда = ВыборкаСО.Ссылка;		
		ОбластьСтрокаОбщая.Параметры.Цена = СрЦ.Найти(ВыборкаСО.Ссылка, "СО").Цена;
		ТабДок.Вывести(ОбластьСтрокаОбщая);
		ВыборкаСкладов = Справочники.Склады.Выбрать();
		
		н = 0;
		Пока ВыборкаСкладов.Следующий() Цикл
			Если ВыборкаСкладов.Ссылка <> ЛиквидируемыйСклад Тогда
				Остатки = ОстаткиТоваров(Дата, ВыборкаСкладов.Ссылка, ВыборкаСО.Ссылка);
				
				Отбор = Новый Структура;
				Отбор.Вставить("СО", ВыборкаСО.Ссылка);
				Отбор.Вставить("Склад", ВыборкаСкладов.Ссылка);
				РаспределеннаяСО = Распределение.НайтиСтроки(Отбор);
				
				// ищем остатки на тех складах, которые не ликвидировали
				// количество считаем как остатки + распределенные товары на данный склад
				Если Остатки.Количество() = 0 Тогда
					ОбщееКоличество = ?(РаспределеннаяСО.Количество() = 0, 0, РаспределеннаяСО[0].Количество);
				Иначе
					ОбщееКоличество = Остатки[0].Количество + ?(РаспределеннаяСО.Количество() = 0, 0, РаспределеннаяСО[0].Количество);
				КонецЕсли;
				
				ОбластьСтрокаСклад.Параметры.Количество = ОбщееКоличество;
				ОбщиеИтоговыеСуммы[н] = ОбщиеИтоговыеСуммы[н] + ОбщееКоличество * СрЦ.Найти(ВыборкаСО.Ссылка, "СО").Цена;
				
				// сумму считаем, как количество (посчитанное выше) * на цену (после переоценки по средневзвешанной цене)
				ОбластьСтрокаСклад.Параметры.Стоимость = ОбщееКоличество * СрЦ.Найти(ВыборкаСО.Ссылка, "СО").Цена;
				ТабДок.Присоединить(ОбластьСтрокаСклад);
				
				н = н + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьИтогоОбщая);	 
	
	// вывод общих итоговых сумм по складам
	Для н = 0 по ОбщиеИтоговыеСуммы.Количество() - 1 Цикл
		// выводим общую сумму в отчет
		ОбластьИтогоСклад.Параметры.Стоимость = ОбщиеИтоговыеСуммы[н];
		ТабДок.Присоединить(ОбластьИтогоСклад);
	КонецЦикла;
КонецПроцедуры

Процедура ПриОткрытии()
	// установка даты по умолчанию (1 апреля 2012 года)
	Дата = '20120401';
	
	// установка склада по умолчанию (склад, с максимальным значением кода)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Склады.Ссылка КАК Склад
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Склады.Код УБЫВ";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() <> 0 Тогда
		ЛиквидируемыйСклад = Результат[0].Склад;
	КонецЕсли;
КонецПроцедуры
