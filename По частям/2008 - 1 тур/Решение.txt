Модуль объекта:

// Производит основной расчет данных для отчета
//
Процедура РассчитатьОтчет() Экспорт
	
	Если МетодикаСписания = Перечисления.МетодСписанияМЦ.СредняяСкользящая Тогда // средняя
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПриходыМатериалов.Период КАК Дата,
		|	ПриходыМатериалов.КоличествоОборотДт КАК КоличествоПриход,
		|	ПриходыМатериалов.СуммаОборотДт КАК СуммаПриход
		|ИЗ
		|	РегистрБухгалтерии.ЖурналОпераций.Обороты(&ДатаНач, &ДатаКон, День, Счет.Код = ""10"", , Субконто1 = &Материал, , ) КАК ПриходыМатериалов
		|ГДЕ
		|	(ПриходыМатериалов.СуммаОборотДт > 0
		|			ИЛИ ПриходыМатериалов.КоличествоОборотДт > 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		Запрос.УстановитьПараметр("ДатаНач" , НачалоКвартала(Дата("20080101")));
		Запрос.УстановитьПараметр("ДатаКон" , КонецКвартала(Дата("20080101")));
		Запрос.УстановитьПараметр("Материал", Материал);
		
		Результат = Запрос.Выполнить();
		РезультатРасчетов.Загрузить(Результат.Выгрузить());
		
		Если КоличествоРасхода = РезультатРасчетов.Итог("КоличествоПриход") Тогда // списываем все (обработка специфического случая)
			ПоследняяСтрока = РезультатРасчетов.Получить(РезультатРасчетов.Количество() - 1);
			ПоследняяСтрока.КоличествоРасход = КоличествоРасхода;
			ПоследняяСтрока.СуммаРасход      = РезультатРасчетов.Итог("СуммаПриход");
			Возврат;
		КонецЕсли;	
		
		ВременныйРезультат.Загрузить(Результат.Выгрузить());
		
		ОсталосьСписать = КоличествоРасхода;
		
		Пока ОсталосьСписать > 0 Цикл
			
			ВременнаяТаблица = Новый Запрос;
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ВременнаяТаблица.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			
			ВременнаяТаблица.Текст = "ВЫБРАТЬ *
			|ПОМЕСТИТЬ врТаблицаВременныхДанных
			|ИЗ &ТаблицаВременныхДанных КАК ТД";
			ВременнаяТаблица.УстановитьПараметр("ТаблицаВременныхДанных", ВременныйРезультат);
			ВременнаяТаблица.Выполнить();
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Текст = "ВЫБРАТЬ
			|	ВложенныйЗапрос.Дата КАК Дата,
			|	ВложенныйЗапрос.КоличествоПриход КАК КоличествоПриход,
			|	ВложенныйЗапрос.СуммаПриход,
			|	ВложенныйЗапрос.ОстатокКоличество,
			|	ВложенныйЗапрос.ОстатокСумма,
			|	ВложенныйЗапрос.ОстатокСумма / ВложенныйЗапрос.ОстатокКоличество КАК СредняяЦена
			|ИЗ
			|	(ВЫБРАТЬ
			|		Основной.Дата КАК Дата,
			|		СРЕДНЕЕ(Основной.КоличествоПриход) КАК КоличествоПриход,
			|		СРЕДНЕЕ(Основной.СуммаПриход) КАК СуммаПриход,
			|		СУММА(Остатки.КоличествоПриход) КАК ОстатокКоличество,
			|		СУММА(Остатки.СуммаПриход) КАК ОстатокСумма
			|	ИЗ
			|		(ВЫБРАТЬ
			|			врТаблицаВременныхДанных.Дата КАК Дата,
			|			врТаблицаВременныхДанных.КоличествоПриход КАК КоличествоПриход,
			|			врТаблицаВременныхДанных.СуммаПриход КАК СуммаПриход
			|		ИЗ
			|			врТаблицаВременныхДанных КАК врТаблицаВременныхДанных) КАК Основной
			|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|				врТаблицаВременныхДанных.Дата КАК Дата,
			|				врТаблицаВременныхДанных.КоличествоПриход КАК КоличествоПриход,
			|				врТаблицаВременныхДанных.СуммаПриход КАК СуммаПриход
			|			ИЗ
			|				врТаблицаВременныхДанных КАК врТаблицаВременныхДанных) КАК Остатки
			|			ПО Основной.Дата >= Остатки.Дата
			|	
			|	СГРУППИРОВАТЬ ПО
			|		Основной.Дата) КАК ВложенныйЗапрос
			|
			|УПОРЯДОЧИТЬ ПО
			|	СредняяЦена УБЫВ,
			|	ОстатокКоличество УБЫВ,
			|	Дата";
			
			Результат = Запрос.Выполнить();
			ВременныйРезультат.Загрузить(Результат.Выгрузить());
			
			//Предупреждение("ОсталосьСписать = " + ОсталосьСписать);
			
			Если ВременныйРезультат.Количество() > 0 Тогда
				ОстатокКоличество  = ВременныйРезультат[0].ОстатокКоличество;
				ОстатокСумма       = ВременныйРезультат[0].ОстатокСумма;
				СредняяЦенаЕдиницы = ВременныйРезультат[0].СредняяЦена;
				ДатаПрихода        = ВременныйРезультат[0].Дата;
				
				Если ОстатокКоличество >= ОсталосьСписать Тогда // весь остаток спишем (часть текущей партии)
					ОстатокКоличество = ОсталосьСписать;
					ОстатокСумма = ОсталосьСписать * СредняяЦенаЕдиницы;
				Иначе // часть остатка спишем (всю текущую партию и все предыдущие)
					ВременныйРезультат.Сортировать("Дата");
					Пока ВременныйРезультат.Количество() > 0 Цикл
						ДатаСтроки = ВременныйРезультат[0].Дата;
						ВременныйРезультат.Удалить(0);
						Если ДатаСтроки = ДатаПрихода Тогда
							Прервать;
						КонецЕсли;
						ОбработкаПрерыванияПользователя();
					КонецЦикла;
				КонецЕсли;
				
				СтрокаРезультата = РезультатРасчетов.Найти(ДатаПрихода, "Дата");
				Если СтрокаРезультата <> Неопределено Тогда
					СтрокаРезультата.КоличествоРасход = ОстатокКоличество;
					СтрокаРезультата.СуммаРасход      = ОстатокСумма;
				Иначе
					Сообщить(" Не могу найти строку по дате!", СтатусСообщения.Важное);
				КонецЕсли;
				
				ОсталосьСписать = ОсталосьСписать - ОстатокКоличество;
			Иначе
				Сообщить(" Во временном результате количество " + ВременныйРезультат.Количество() + ", что не больше 0!", СтатусСообщения.Важное);
			КонецЕсли;
			
			ОбработкаПрерыванияПользователя();
			
		КонецЦикла;
		
	ИначеЕсли МетодикаСписания = Перечисления.МетодСписанияМЦ.ЛИФО Тогда // ЛИФО
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПриходыМатериалов.Период КАК Дата,
		               |	ПриходыМатериалов.КоличествоОборотДт КАК КоличествоПриход,
		               |	ПриходыМатериалов.СуммаОборотДт КАК СуммаПриход,
		               |	ПриходыМатериалов.СуммаОборотДт / ПриходыМатериалов.КоличествоОборотДт КАК ЦенаЕдиницы
		               |ИЗ
		               |	РегистрБухгалтерии.ЖурналОпераций.Обороты(&ДатаНач, &ДатаКон, День, Счет.Код = ""10"", , Субконто1 = &Материал, , ) КАК ПриходыМатериалов
		               |ГДЕ
		               |	(ПриходыМатериалов.СуммаОборотДт > 0
		               |			ИЛИ ПриходыМатериалов.КоличествоОборотДт > 0)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ЦенаЕдиницы УБЫВ,
		               |	Дата";
		Запрос.УстановитьПараметр("ДатаНач" , НачалоКвартала(Дата("20080101")));
		Запрос.УстановитьПараметр("ДатаКон" , КонецКвартала(Дата("20080101")));
		Запрос.УстановитьПараметр("Материал", Материал);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		РезультатРасчетов.Очистить();
		
		ОсталосьСписать = КоличествоРасхода;
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = РезультатРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Если ОсталосьСписать <> 0 Тогда
				Если НоваяСтрока.КоличествоПриход >= ОсталосьСписать Тогда // весь остаток спишем
					НоваяСтрока.КоличествоРасход = ОсталосьСписать;
					НоваяСтрока.СуммаРасход      = ОсталосьСписать * Выборка.ЦенаЕдиницы;
					ОсталосьСписать = 0;
				Иначе // часть остатка спишем
					НоваяСтрока.КоличествоРасход = Выборка.КоличествоПриход;
					НоваяСтрока.СуммаРасход      = Выборка.СуммаПриход;
					ОсталосьСписать = ОсталосьСписать - Выборка.КоличествоПриход;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		РезультатРасчетов.Сортировать("Дата");
		
		Итератор = РезультатРасчетов.Количество() - 1;
		Пока Итератор >= 0 Цикл
			Строка = РезультатРасчетов.Получить(Итератор);
			//Сообщить("Дата = " + Строка.Дата);
			
			Если Строка.КоличествоРасход <> 0 Или Строка.СуммаРасход <> 0 Тогда // обрабатываем только строки с заполненным расходом
				
				СобранноеКоличество = Строка.КоличествоРасход;
				СобраннаяСумма      = Строка.СуммаРасход;
				
				ОбратныйСчетчик = Итератор - 1;
				Пока ОбратныйСчетчик >= 0 Цикл
					Подстрока = РезультатРасчетов.Получить(ОбратныйСчетчик);
					//Сообщить(" Подстрока дата = " + Подстрока.Дата);
					
					СобранноеКоличество = СобранноеКоличество + Подстрока.КоличествоРасход;
					СобраннаяСумма      = СобраннаяСумма      + Подстрока.СуммаРасход;
					
					КоличествоПодстроки = Подстрока.КоличествоРасход;
					
					Подстрока.КоличествоРасход = 0;
					Подстрока.СуммаРасход      = 0;
					
					Если КоличествоПодстроки <> Подстрока.КоличествоПриход Тогда // дошли до той партии, которая списана только частично
						Прервать;
					КонецЕсли;
					
					ОбработкаПрерыванияПользователя();
					ОбратныйСчетчик = ОбратныйСчетчик - 1;
				КонецЦикла;
				
				Строка.КоличествоРасход = СобранноеКоличество;
				Строка.СуммаРасход      = СобраннаяСумма;
				
			КонецЕсли;
			
			ОбработкаПрерыванияПользователя();
			Итератор = Итератор - 1;
		КонецЦикла;
		
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьОтчет()

// Производит вывод отчета в переданный параметром табличный документ
//
Процедура ВывестиОтчет(ТабДок) Экспорт
	
	Макет = ЭтотОбъект.ПолучитьМакет("МакетОтчета");
	
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаТаблицы     = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы    = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	
	ТабДок.Очистить();
	
	ЗаполнитьЗначенияСвойств(ОбластьЗаголовок.Параметры, ЭтотОбъект);
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.ФиксацияСверху = 4;
	
	Для Каждого Строка Из РезультатРасчетов Цикл
		ОбластьДетальныхЗаписей.Параметры.Заполнить(Строка);
		ТабДок.Вывести(ОбластьДетальныхЗаписей);
	КонецЦикла;
	
	ОбластьПодвалТаблицы.Параметры.ИтогоКоличествоПриход = РезультатРасчетов.Итог("КоличествоПриход");
	ОбластьПодвалТаблицы.Параметры.ИтогоСуммаПриход      = РезультатРасчетов.Итог("СуммаПриход");
	ОбластьПодвалТаблицы.Параметры.ИтогоКоличествоРасход = РезультатРасчетов.Итог("КоличествоРасход");
	ОбластьПодвалТаблицы.Параметры.ИтогоСуммаРасход      = РезультатРасчетов.Итог("СуммаРасход");
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	
КонецПроцедуры // ВывестиОтчет()

Модуль формы:

// Проводит предварительные проверки входной информации введенной пользователем, запускает основной код расчета и формирования отчета
//
Процедура ДействияФормыСформировать(Кнопка)
	
	// сначала всякие проверки на корректный ввод исходных данных
	Если Не ЗначениеЗаполнено(Материал) Тогда
		Предупреждение("Пожалуйста укажите материал по которому необходимо рассчитать и сформировать отчет!",,);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КоличествоРасхода) Тогда
		Предупреждение("Пожалуйста укажите величину расхода в натуральном выражении (поле ""количество расхода"") по которой нужно рассчитать отчет!",,);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МетодикаСписания) Тогда
		Предупреждение("Пожалуйста укажите методику списания по которой необходимо рассчитать и сформировать отчет!",,);
		Возврат;
	КонецЕсли;
	
	// проверка остатка величины расхода материала введенной пользователем
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОстаткиМатериала.КоличествоОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.ЖурналОпераций.Остатки(&ДатаКон, Счет.Код = ""10"", , Субконто1 = &Материал) КАК ОстаткиМатериала
	               |ГДЕ
	               |	ОстаткиМатериала.КоличествоОстаток < &КоличествоРасхода";
	
	Запрос.УстановитьПараметр("Материал"         , Материал);
	Запрос.УстановитьПараметр("ДатаКон"          , КонецКвартала(Дата("20080101")));
	Запрос.УстановитьПараметр("КоличествоРасхода", КоличествоРасхода);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Сообщить("Величина расхода материала """ + Материал + """ в натуральном выражении (" + КоличествоРасхода + " единиц) не может быть больше остатка (" + Выборка.КоличествоОстаток + " единиц) по данным на конец I квартала 2008 г.!", СтатусСообщения.Важное);
		Предупреждение("Расчет отчета не выполнен!",,);
		Возврат;
	КонецЕсли;
	
	// выполним расчеты
	РассчитатьОтчет();
	
	// выведем расчеты
	ВывестиОтчет(ЭлементыФормы.ТабДокумент);
	
КонецПроцедуры // ДействияФормыСформировать()